name: Build homepage on new release

on:
  schedule:
    - cron: '0 0 * * 0' # Runs daily at midnight UTC (supposedly)
  workflow_dispatch:

jobs:
  Check-homepage-release:
    runs-on: ubuntu-latest
    outputs:
      latest_release: ${{ steps.check.outputs.latest_release }}
      is_new_release: ${{ steps.compare.outputs.is_new_release }}
    steps:
      - name: Get latest homepage release
        id: check
        run: |
          LATEST_TAG=$(curl -s https://api.github.com/repos/gethomepage/homepage/releases/latest | jq -r '.tag_name')
          echo "latest_release=$LATEST_TAG" >> $GITHUB_ENV
          echo "latest_release=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Compare latest release with stored one
        id: compare
        env:
          STORED_RELEASE_VAR: ${{ vars.LATEST_HOMEPAGE_RELEASE }} # Access the variable
        run: |
          LATEST_TAG=${{ steps.check.outputs.latest_release }}
          PREV_TAG="${{ env.STORED_RELEASE_VAR }}" # Use the variable value

          echo "Latest tag: $LATEST_TAG"
          echo "Previous tag (from variable): $PREV_TAG"

          if [ "$LATEST_TAG" != "$PREV_TAG" ]; then
            echo "is_new_release=true" >> $GITHUB_ENV
            echo "is_new_release=true" >> $GITHUB_OUTPUT
            # Update the repository variable
            echo "::notice file=README.md::New release detected: $LATEST_TAG. Updating repository variable."
            curl -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository_owner }}/${{ github.repository }}/variables/LATEST_HOMEPAGE_RELEASE \
            -d '{"value":"'$LATEST_TAG'"}'
          else
            echo "is_new_release=false" >> $GITHUB_ENV
            echo "is_new_release=false" >> $GITHUB_OUTPUT
          fi
          
  Build-homepage:
    needs: Check-homepage-release
    outputs:
      timestamp: ${{ steps.timestamp.outputs.timestamp }}
    if: needs.Check-homepage-release.outputs.is_new_release == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Download latest homepage release
        run: |
          curl -s https://api.github.com/repos/gethomepage/homepage/releases/latest \
          | jq -r '.tarball_url' \
          | xargs curl -L -o homepage.tar.gz

      - name: Extract homepage release
        run: |
          tar --no-same-owner -xzf homepage.tar.gz --one-top-level --strip-components=1 -C .
        
      - name: Create Dockerfile.alpine
        run: |
          cat <<EOF > ${{ github.workspace }}/Dockerfile.alpine
          # Start with the Alpine image
          FROM node:22-alpine

          # Install dependencies and build the app
          WORKDIR /app
          COPY . /app
          RUN npm install -g pnpm
          RUN pnpm install
          RUN pnpm build

          EOF

      - name: Build in Alpine Docker container
        run: |
          docker build -t homepage-builder -f Dockerfile.alpine ${{ github.workspace }}/homepage
          docker create --name homepage-app homepage-builder
          rm -rf ${{ github.workspace }}/homepage
          docker cp homepage-app:/app ${{ github.workspace }}/homepage
          docker rm homepage-app
        working-directory: ${{ github.workspace }}

      - name: Set up config symlink
        run: |
          mkdir config
          cd homepage
          rm -r config
          ln -s ../config config

      - name: Timestamp
        id: timestamp
        run: echo "timestamp=$(date)" >> $GITHUB_OUTPUT

      - name: Archive homepage folder
        run: |
          tar -czf homepage.tar.gz homepage

      - name: Upload homepage as artifact
        uses: actions/upload-artifact@v4
        with:
          name: homepage-app-${{ needs.Check-homepage-release.outputs.latest_release }}
          path: homepage.tar.gz

  Release-homepage-build:
    needs: [Build-homepage, Check-homepage-release]
    if: needs.Check-homepage-release.outputs.is_new_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: homepage-app-${{ needs.Check-homepage-release.outputs.latest_release }}
          path: app-release

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.Check-homepage-release.outputs.latest_release }}
          name: homepage server ${{ needs.Check-homepage-release.outputs.latest_release }}  
          body: |
            This release contains the latest build of homepage server:
            - Version: **${{ needs.Check-homepage-release.outputs.latest_release }}**
            - Built on: **${{ needs.Build-homepage.outputs.timestamp }}**
            - Built for: Alpine Linux

            **How to install**:  
            - Extract the server with `tar -xf homepage.tar.gz --no-same-owner`.

            **Release details**:  
            This release was created automatically by GitHub Actions. You can track the build process here: [GitHub Actions Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).
          draft: false
          prerelease: false
          artifacts: app-release/homepage.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}